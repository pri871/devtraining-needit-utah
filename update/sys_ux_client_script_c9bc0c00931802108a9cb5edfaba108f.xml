<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ux_client_script">
    <sys_ux_client_script action="INSERT_OR_UPDATE">
        <controller_preset/>
        <includes/>
        <macroponent display_value="Home">5fd11afb1b818d10b81fdce7cc4bcb15</macroponent>
        <name>createTag</name>
        <preset/>
        <required_translations>[
    
]</required_translations>
        <script><![CDATA[/**
 * @param {params} params
 * @param {api} params.api
 * @param {any} params.event
 * @param {any} params.imports
 */
function handler({
    api,
    event,
    helpers,
    imports
}) {

    
    const valueTag = api.state.newTag.replace(/ /g, '');
    if (valueTag && valueTag != "") {
        if (tagExists(api.state.newTag)) {
            //Display error message
            let activity = api.state.activityData;
            activity.messageSetting = {
                "icon": "Circle Exclamation Outline",
                "message": ["The tag is already existing"],
                "type": "critical",
                "hidden": false
            };
            api.setState('activityData', activity);
        } else {
            //var check = api.state.newTag;
            const templateFields =
              '^u_name=Test^u_active=true';

              
               // 'u_name='+valueTag+'^u_active=true';
               

            api.data.createRecord.execute({
                "table": "x_58872_needit_tags",
                "templateFields": templateFields,
                "useSetDisplayValue": false

            });

            //Clear the variable
            api.setState("newTag", "");

            //Display message
            let activity = api.state.activityData;
        
            activity.messageSetting = {
                "icon": "Check Fill",
                "message": ["The new tag has been get created"],
                "type": "positive",
                "hidden": false 
            };
            api.setState('activityData', activity);
        }
    } else {
        //Display error message
        let activity = api.state.activityData;
        activity.messageSetting = {
            "icon": "Circle Exclamation Outline",
            "message": ["The tag name can not be empty"],
            "type": "critical",
            "hidden": false
        };
        api.setState('activityData', activity);
    }

    function tagExists(name) {
        const tags = api.data.lookUpTags.results;
        const filteredTags = tags.filter(t => t._row_data.displayValue.toUpperCase() == name.toUpperCase());
        if (filteredTags.length > 0)
            return true;
        else
            return false;
    }
}]]></script>
        <script_api_version>2.0.0</script_api_version>
        <sys_class_name>sys_ux_client_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-02-06 19:53:52</sys_created_on>
        <sys_id>c9bc0c00931802108a9cb5edfaba108f</sys_id>
        <sys_mod_count>5</sys_mod_count>
        <sys_name>createTag</sys_name>
        <sys_package display_value="NeedIt" source="x_58872_needit">6ead8e780f603200cd674f8ce1050ed1</sys_package>
        <sys_policy/>
        <sys_scope display_value="NeedIt">6ead8e780f603200cd674f8ce1050ed1</sys_scope>
        <sys_update_name>sys_ux_client_script_c9bc0c00931802108a9cb5edfaba108f</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-02-06 20:16:29</sys_updated_on>
        <target>macroponent</target>
        <type>default</type>
    </sys_ux_client_script>
</record_update>
